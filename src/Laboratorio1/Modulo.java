/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Laboratorio1;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

public class Modulo extends javax.swing.JFrame {

    /** Creates new form Modulo */
    public Modulo() {
        initComponents();
        setResizable(false);
        setLocation(720,360);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ModuloCliente = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        fechaNacim = new com.toedter.calendar.JDateChooser();
        colorPer = new javax.swing.JTextField();
        razaPer = new javax.swing.JTextField();
        nomPer = new javax.swing.JTextField();
        cedCliente = new javax.swing.JTextField();
        añadirBtn = new javax.swing.JButton();
        actualizarDatos = new javax.swing.JButton();
        moduloCitas = new javax.swing.JButton();
        ActualizarDatos = new javax.swing.JFrame();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cedulaBuscarCliente = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        elimBtnCliente = new javax.swing.JButton();
        guardarBtn = new javax.swing.JButton();
        ModuloCitas = new javax.swing.JFrame();
        jPanel7 = new javax.swing.JPanel();
        consultaVet = new javax.swing.JRadioButton();
        control = new javax.swing.JRadioButton();
        despa = new javax.swing.JRadioButton();
        vacun = new javax.swing.JRadioButton();
        guard = new javax.swing.JRadioButton();
        radio = new javax.swing.JRadioButton();
        baño = new javax.swing.JRadioButton();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        cedulaCita = new javax.swing.JTextPane();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        nomMascota = new javax.swing.JTextPane();
        jLabel23 = new javax.swing.JLabel();
        fechaCita = new com.toedter.calendar.JDateChooser();
        modifBtn = new javax.swing.JButton();
        solicitarBtn = new javax.swing.JButton();
        citasOp = new javax.swing.ButtonGroup();
        ModificarCitasCliente = new javax.swing.JFrame();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        buscarCedulaCita = new javax.swing.JTextField();
        cancelarCitaBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCitas = new javax.swing.JTable();
        buscarCitaBtn = new javax.swing.JButton();
        guardarAgendaBtn = new javax.swing.JButton();
        ModuloVeterinario = new javax.swing.JFrame();
        jPanel6 = new javax.swing.JPanel();
        botonAgenda = new javax.swing.JButton();
        botonHisClinica = new javax.swing.JButton();
        AgendaVet = new javax.swing.JFrame();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaAgenda = new javax.swing.JTable();
        HistoriaClinica = new javax.swing.JFrame();
        jPanel9 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        fechaHC = new com.toedter.calendar.JDateChooser();
        cedulaHC = new javax.swing.JTextField();
        perroHC = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        diagnosticoHC = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        prescripcionHC = new javax.swing.JTextField();
        añadirInfoClinica = new javax.swing.JButton();
        botonHisClinicas = new javax.swing.JButton();
        DatosClinicos = new javax.swing.JFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaClinica = new javax.swing.JTable();
        ModuloAdmin = new javax.swing.JFrame();
        jPanel5 = new javax.swing.JPanel();
        gestAgenda = new javax.swing.JButton();
        genFact = new javax.swing.JButton();
        AsignarAdmin = new javax.swing.JFrame();
        jPanel10 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        cedulaAdmin = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        nomMascotaAdmin = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        razaMascotaAdmin = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        colorMascotaAdmin = new javax.swing.JTextField();
        asignarDatosAdmin = new javax.swing.JButton();
        consultaAdm = new javax.swing.JRadioButton();
        controlAdm = new javax.swing.JRadioButton();
        desparasitacionAdm = new javax.swing.JRadioButton();
        vacunacionAdm = new javax.swing.JRadioButton();
        guarderiaAdm = new javax.swing.JRadioButton();
        radiologiaAdm = new javax.swing.JRadioButton();
        bañoAdm = new javax.swing.JRadioButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        fechaNacimientoAdmin = new com.toedter.calendar.JDateChooser();
        fechaConsulAdmin = new com.toedter.calendar.JDateChooser();
        verAgendaBtn = new javax.swing.JButton();
        GestionAdmin = new javax.swing.JFrame();
        jPanel11 = new javax.swing.JPanel();
        cedFacturar = new javax.swing.JTextField();
        buscarAdmin = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaFactura = new javax.swing.JTable();
        facturarAdmin = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        totalPagar = new javax.swing.JTextField();
        BotonesAdmin = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Cliente = new javax.swing.JButton();
        Veterinario = new javax.swing.JButton();
        Admin = new javax.swing.JButton();

        ModuloCliente.setTitle("Cliente");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cédula");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Nombre Perro");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Raza Perro");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Color Perro");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Fecha de nacimiento");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        fechaNacim.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fechaNacim.setToolTipText("");

        colorPer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        razaPer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        nomPer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cedCliente.setToolTipText("");
        cedCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cedCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cedClienteActionPerformed(evt);
            }
        });

        añadirBtn.setText("Añadir");
        añadirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirBtnActionPerformed(evt);
            }
        });

        actualizarDatos.setText("Actualizar datos");
        actualizarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarDatosActionPerformed(evt);
            }
        });

        moduloCitas.setText("Módulo de citas");
        moduloCitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduloCitasActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(33, 33, 33)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                        .add(añadirBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(cedCliente)
                    .add(nomPer)
                    .add(razaPer)
                    .add(colorPer)
                    .add(fechaNacim, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(actualizarDatos)
                    .add(moduloCitas))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(cedCliente)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(28, 28, 28)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nomPer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(actualizarDatos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(28, 28, 28)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(razaPer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(28, 28, 28)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(colorPer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(moduloCitas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(25, 25, 25)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(fechaNacim, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(añadirBtn)
                .add(17, 17, 17))
        );

        fechaNacim.getAccessibleContext().setAccessibleDescription("");

        org.jdesktop.layout.GroupLayout ModuloClienteLayout = new org.jdesktop.layout.GroupLayout(ModuloCliente.getContentPane());
        ModuloCliente.getContentPane().setLayout(ModuloClienteLayout);
        ModuloClienteLayout.setHorizontalGroup(
            ModuloClienteLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ModuloClienteLayout.setVerticalGroup(
            ModuloClienteLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        ActualizarDatos.setTitle("Datos");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Ingrese su cédula");
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cedulaBuscarCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cedula ", "Nombre perro", "Raza perro", "Color perro", "Nacimiento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaClientes);
        if (tablaClientes.getColumnModel().getColumnCount() > 0) {
            tablaClientes.getColumnModel().getColumn(0).setResizable(false);
            tablaClientes.getColumnModel().getColumn(1).setResizable(false);
            tablaClientes.getColumnModel().getColumn(2).setResizable(false);
            tablaClientes.getColumnModel().getColumn(3).setResizable(false);
            tablaClientes.getColumnModel().getColumn(4).setResizable(false);
        }

        elimBtnCliente.setText("Eliminar");
        elimBtnCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elimBtnClienteActionPerformed(evt);
            }
        });

        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(14, 14, 14)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(cedulaBuscarCliente)
                        .add(6, 6, 6)
                        .add(buscarBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(guardarBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(elimBtnCliente))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE))
                .add(26, 26, 26))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cedulaBuscarCliente)
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(buscarBtn)
                        .add(elimBtnCliente)
                        .add(guardarBtn)))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(28, 28, 28))
        );

        org.jdesktop.layout.GroupLayout ActualizarDatosLayout = new org.jdesktop.layout.GroupLayout(ActualizarDatos.getContentPane());
        ActualizarDatos.getContentPane().setLayout(ActualizarDatosLayout);
        ActualizarDatosLayout.setHorizontalGroup(
            ActualizarDatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ActualizarDatosLayout.setVerticalGroup(
            ActualizarDatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        ModuloCitas.setTitle("Seleccionar Cita");
        ModuloCitas.setBackground(new java.awt.Color(255, 255, 255));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        consultaVet.setBackground(new java.awt.Color(255, 255, 255));
        citasOp.add(consultaVet);
        consultaVet.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        consultaVet.setText("Consulta Veterinario $60.000 1h");
        consultaVet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consultaVetMouseClicked(evt);
            }
        });
        consultaVet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaVetActionPerformed(evt);
            }
        });

        control.setBackground(new java.awt.Color(255, 255, 255));
        citasOp.add(control);
        control.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        control.setText("Control $10.000 1/2h");
        control.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                controlMouseClicked(evt);
            }
        });

        despa.setBackground(new java.awt.Color(255, 255, 255));
        citasOp.add(despa);
        despa.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        despa.setText("Desparasitación $40.000 1/2h");
        despa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                despaMouseClicked(evt);
            }
        });
        despa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                despaActionPerformed(evt);
            }
        });

        vacun.setBackground(new java.awt.Color(255, 255, 255));
        citasOp.add(vacun);
        vacun.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        vacun.setText("Vacunación $35.000 1/2h");
        vacun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vacunMouseClicked(evt);
            }
        });

        guard.setBackground(new java.awt.Color(255, 255, 255));
        citasOp.add(guard);
        guard.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        guard.setText("Guardería $35.000 1 día");
        guard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardMouseClicked(evt);
            }
        });

        radio.setBackground(new java.awt.Color(255, 255, 255));
        citasOp.add(radio);
        radio.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        radio.setText("Radiología $100.000 1h");
        radio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioMouseClicked(evt);
            }
        });

        baño.setBackground(new java.awt.Color(255, 255, 255));
        citasOp.add(baño);
        baño.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        baño.setText("Baño $25.000 2h");
        baño.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bañoMouseClicked(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Cedula");
        jLabel22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cedulaCita.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane6.setViewportView(cedulaCita);

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("Mascota");
        jLabel24.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        nomMascota.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane7.setViewportView(nomMascota);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Fecha de la cita");
        jLabel23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        fechaCita.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fechaCita.setDateFormatString("dd/MM/yy");

        modifBtn.setText("Modificar una cita");
        modifBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifBtnActionPerformed(evt);
            }
        });

        solicitarBtn.setText("Solicitar");
        solicitarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solicitarBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(modifBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(solicitarBtn)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(consultaVet, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7Layout.createSequentialGroup()
                                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel22, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jLabel24, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jLabel23, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .add(10, 10, 10)
                                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(fechaCita, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                    .add(jScrollPane7)
                                    .add(jScrollPane6)))
                            .add(control, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(despa, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(vacun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(guard, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(radio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(baño, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(consultaVet)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(control)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(despa)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(vacun)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(guard)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(radio)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(baño)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .add(jLabel22, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .add(jLabel24, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(fechaCita, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel23, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(modifBtn)
                    .add(solicitarBtn))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout ModuloCitasLayout = new org.jdesktop.layout.GroupLayout(ModuloCitas.getContentPane());
        ModuloCitas.getContentPane().setLayout(ModuloCitasLayout);
        ModuloCitasLayout.setHorizontalGroup(
            ModuloCitasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        ModuloCitasLayout.setVerticalGroup(
            ModuloCitasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        ModificarCitasCliente.setTitle("Módulo de Citas");

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Cédula");
        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buscarCedulaCita.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cancelarCitaBtn.setText("Cancelar");
        cancelarCitaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarCitaBtnActionPerformed(evt);
            }
        });

        tablaCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cedula", "Mascota", "Servicio", "Precio", "Fecha", "Hora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaCitas);
        if (tablaCitas.getColumnModel().getColumnCount() > 0) {
            tablaCitas.getColumnModel().getColumn(0).setResizable(false);
            tablaCitas.getColumnModel().getColumn(1).setResizable(false);
            tablaCitas.getColumnModel().getColumn(3).setResizable(false);
            tablaCitas.getColumnModel().getColumn(4).setResizable(false);
            tablaCitas.getColumnModel().getColumn(5).setResizable(false);
        }

        buscarCitaBtn.setText("Buscar");
        buscarCitaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarCitaBtnActionPerformed(evt);
            }
        });

        guardarAgendaBtn.setText("Guardar");
        guardarAgendaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarAgendaBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(buscarCedulaCita, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buscarCitaBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(guardarAgendaBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelarCitaBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(buscarCedulaCita, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(buscarCitaBtn)
                        .add(guardarAgendaBtn)
                        .add(cancelarCitaBtn)))
                .add(15, 15, 15)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout ModificarCitasClienteLayout = new org.jdesktop.layout.GroupLayout(ModificarCitasCliente.getContentPane());
        ModificarCitasCliente.getContentPane().setLayout(ModificarCitasClienteLayout);
        ModificarCitasClienteLayout.setHorizontalGroup(
            ModificarCitasClienteLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ModificarCitasClienteLayout.setVerticalGroup(
            ModificarCitasClienteLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        ModuloVeterinario.setTitle("Veterinario");

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        botonAgenda.setText("Agenda");
        botonAgenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgendaActionPerformed(evt);
            }
        });

        botonHisClinica.setText("Historias Clinicas");
        botonHisClinica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonHisClinicaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(137, Short.MAX_VALUE)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(botonHisClinica)
                    .add(botonAgenda, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(125, 125, 125))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(55, 55, 55)
                .add(botonAgenda, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(44, 44, 44)
                .add(botonHisClinica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout ModuloVeterinarioLayout = new org.jdesktop.layout.GroupLayout(ModuloVeterinario.getContentPane());
        ModuloVeterinario.getContentPane().setLayout(ModuloVeterinarioLayout);
        ModuloVeterinarioLayout.setHorizontalGroup(
            ModuloVeterinarioLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, ModuloVeterinarioLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        ModuloVeterinarioLayout.setVerticalGroup(
            ModuloVeterinarioLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        AgendaVet.setTitle("Agenda");

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        tablaAgenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cedula", "Mascota", "Servicio", "Precio", "Fecha", "Hora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaAgenda);
        if (tablaAgenda.getColumnModel().getColumnCount() > 0) {
            tablaAgenda.getColumnModel().getColumn(0).setResizable(false);
            tablaAgenda.getColumnModel().getColumn(1).setResizable(false);
            tablaAgenda.getColumnModel().getColumn(3).setResizable(false);
            tablaAgenda.getColumnModel().getColumn(4).setResizable(false);
            tablaAgenda.getColumnModel().getColumn(5).setResizable(false);
        }

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout AgendaVetLayout = new org.jdesktop.layout.GroupLayout(AgendaVet.getContentPane());
        AgendaVet.getContentPane().setLayout(AgendaVetLayout);
        AgendaVetLayout.setHorizontalGroup(
            AgendaVetLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        AgendaVetLayout.setVerticalGroup(
            AgendaVetLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        HistoriaClinica.setTitle("Datos Clinicos");

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Fecha de la Consulta");
        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Cedula");
        jLabel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Nombre del Perro");
        jLabel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        fechaHC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cedulaHC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        perroHC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Diagnóstico");
        jLabel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        diagnosticoHC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Prescripción");
        jLabel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        prescripcionHC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        añadirInfoClinica.setText("Añadir información");
        añadirInfoClinica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirInfoClinicaActionPerformed(evt);
            }
        });

        botonHisClinicas.setText("Historias Clinicas");
        botonHisClinicas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonHisClinicasActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel9Layout.createSequentialGroup()
                        .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(fechaHC, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(cedulaHC)
                            .add(perroHC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(359, 359, 359))
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(diagnosticoHC)
                                .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(prescripcionHC, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))
                            .add(jPanel9Layout.createSequentialGroup()
                                .add(añadirInfoClinica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(botonHisClinicas)))
                        .add(0, 0, Short.MAX_VALUE))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(fechaHC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .add(18, 18, 18)
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cedulaHC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(perroHC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(diagnosticoHC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(prescripcionHC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(añadirInfoClinica)
                    .add(botonHisClinicas))
                .add(17, 17, 17))
        );

        org.jdesktop.layout.GroupLayout HistoriaClinicaLayout = new org.jdesktop.layout.GroupLayout(HistoriaClinica.getContentPane());
        HistoriaClinica.getContentPane().setLayout(HistoriaClinicaLayout);
        HistoriaClinicaLayout.setHorizontalGroup(
            HistoriaClinicaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 313, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        HistoriaClinicaLayout.setVerticalGroup(
            HistoriaClinicaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        DatosClinicos.setTitle("Historiales Clinicos");

        tablaClinica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha de la Consulta", "Cedula", "Nombre del Perro", "Diagnóstico", "Prescripción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tablaClinica);
        if (tablaClinica.getColumnModel().getColumnCount() > 0) {
            tablaClinica.getColumnModel().getColumn(0).setResizable(false);
            tablaClinica.getColumnModel().getColumn(1).setResizable(false);
            tablaClinica.getColumnModel().getColumn(2).setResizable(false);
        }

        org.jdesktop.layout.GroupLayout DatosClinicosLayout = new org.jdesktop.layout.GroupLayout(DatosClinicos.getContentPane());
        DatosClinicos.getContentPane().setLayout(DatosClinicosLayout);
        DatosClinicosLayout.setHorizontalGroup(
            DatosClinicosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
        );
        DatosClinicosLayout.setVerticalGroup(
            DatosClinicosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
        );

        ModuloAdmin.setTitle("Administrador");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        gestAgenda.setText("Gestión de agenda");
        gestAgenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gestAgendaActionPerformed(evt);
            }
        });

        genFact.setText("Generar factura");
        genFact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genFactActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(genFact, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(gestAgenda))
                .add(134, 134, 134))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(48, 48, 48)
                .add(gestAgenda, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(28, 28, 28)
                .add(genFact, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout ModuloAdminLayout = new org.jdesktop.layout.GroupLayout(ModuloAdmin.getContentPane());
        ModuloAdmin.getContentPane().setLayout(ModuloAdminLayout);
        ModuloAdminLayout.setHorizontalGroup(
            ModuloAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ModuloAdminLayout.createSequentialGroup()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );
        ModuloAdminLayout.setVerticalGroup(
            ModuloAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        AsignarAdmin.setTitle("Agendar Citas");

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Cedula");
        jLabel16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cedulaAdmin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel17.setBackground(new java.awt.Color(255, 255, 255));
        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Nombre mascota");
        jLabel17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        nomMascotaAdmin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Raza");
        jLabel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        razaMascotaAdmin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Color");
        jLabel19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        colorMascotaAdmin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        asignarDatosAdmin.setText("Asignar");
        asignarDatosAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asignarDatosAdminActionPerformed(evt);
            }
        });

        consultaAdm.setBackground(new java.awt.Color(255, 255, 255));
        BotonesAdmin.add(consultaAdm);
        consultaAdm.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        consultaAdm.setText("Consulta Veterinario   $60.000 x 1hr");

        controlAdm.setBackground(new java.awt.Color(255, 255, 255));
        BotonesAdmin.add(controlAdm);
        controlAdm.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        controlAdm.setText("Control                     $10.000 x 1/2hr");

        desparasitacionAdm.setBackground(new java.awt.Color(255, 255, 255));
        BotonesAdmin.add(desparasitacionAdm);
        desparasitacionAdm.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        desparasitacionAdm.setText("Desparasitación        $40.000 x 1/2hr");

        vacunacionAdm.setBackground(new java.awt.Color(255, 255, 255));
        BotonesAdmin.add(vacunacionAdm);
        vacunacionAdm.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        vacunacionAdm.setText("Vacunación                $35.000 x 1/2hr");
        vacunacionAdm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vacunacionAdmActionPerformed(evt);
            }
        });

        guarderiaAdm.setBackground(new java.awt.Color(255, 255, 255));
        BotonesAdmin.add(guarderiaAdm);
        guarderiaAdm.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        guarderiaAdm.setText("Guardería                  $35.000 x 1 día");

        radiologiaAdm.setBackground(new java.awt.Color(255, 255, 255));
        BotonesAdmin.add(radiologiaAdm);
        radiologiaAdm.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        radiologiaAdm.setText("Radiología                  $100.000 x 1hr");

        bañoAdm.setBackground(new java.awt.Color(255, 255, 255));
        BotonesAdmin.add(bañoAdm);
        bañoAdm.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        bañoAdm.setText("Baño                          $25.000 x 2hrs");

        jLabel20.setBackground(new java.awt.Color(255, 255, 255));
        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Fecha de Nacimiento");
        jLabel20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel21.setBackground(new java.awt.Color(255, 255, 255));
        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Fecha de la Consulta");
        jLabel21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        verAgendaBtn.setText("Ver citas");
        verAgendaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verAgendaBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel10Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, nomMascotaAdmin)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, cedulaAdmin)
                            .add(jLabel17)
                            .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(razaMascotaAdmin)
                            .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(colorMascotaAdmin, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(controlAdm, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(consultaAdm, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(desparasitacionAdm, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(vacunacionAdm, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(guarderiaAdm, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(radiologiaAdm, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(bañoAdm)
                            .add(jPanel10Layout.createSequentialGroup()
                                .add(jLabel20)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel21))))
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(asignarDatosAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(23, 23, 23)
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(verAgendaBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel10Layout.createSequentialGroup()
                                .add(0, 0, Short.MAX_VALUE)
                                .add(fechaNacimientoAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(58, 58, 58)
                                .add(fechaConsulAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(consultaAdm))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cedulaAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(controlAdm))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(desparasitacionAdm))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nomMascotaAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(vacunacionAdm))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(guarderiaAdm))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(razaMascotaAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(radiologiaAdm))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19)
                    .add(bañoAdm))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(colorMascotaAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel20)
                    .add(jLabel21))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fechaNacimientoAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fechaConsulAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(11, 11, 11)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(asignarDatosAdmin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(verAgendaBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout AsignarAdminLayout = new org.jdesktop.layout.GroupLayout(AsignarAdmin.getContentPane());
        AsignarAdmin.getContentPane().setLayout(AsignarAdminLayout);
        AsignarAdminLayout.setHorizontalGroup(
            AsignarAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        AsignarAdminLayout.setVerticalGroup(
            AsignarAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        GestionAdmin.setTitle("Facturación");

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        cedFacturar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buscarAdmin.setText("Buscar");
        buscarAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarAdminActionPerformed(evt);
            }
        });

        tablaFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula", "Mascota", "Servicio", "Precio", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tablaFactura);
        if (tablaFactura.getColumnModel().getColumnCount() > 0) {
            tablaFactura.getColumnModel().getColumn(0).setResizable(false);
            tablaFactura.getColumnModel().getColumn(1).setResizable(false);
            tablaFactura.getColumnModel().getColumn(2).setResizable(false);
            tablaFactura.getColumnModel().getColumn(3).setResizable(false);
            tablaFactura.getColumnModel().getColumn(4).setResizable(false);
        }

        facturarAdmin.setText("Facturar");
        facturarAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facturarAdminActionPerformed(evt);
            }
        });

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Total a pagar:");
        jLabel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        totalPagar.setEditable(false);
        totalPagar.setBackground(new java.awt.Color(255, 255, 255));
        totalPagar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        totalPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalPagarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel11Layout.createSequentialGroup()
                        .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(totalPagar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel11Layout.createSequentialGroup()
                        .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                            .add(jPanel11Layout.createSequentialGroup()
                                .add(cedFacturar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(buscarAdmin)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(facturarAdmin)))
                        .addContainerGap())))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cedFacturar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(buscarAdmin)
                    .add(facturarAdmin))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(totalPagar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout GestionAdminLayout = new org.jdesktop.layout.GroupLayout(GestionAdmin.getContentPane());
        GestionAdmin.getContentPane().setLayout(GestionAdminLayout);
        GestionAdminLayout.setHorizontalGroup(
            GestionAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        GestionAdminLayout.setVerticalGroup(
            GestionAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Veterinaria");
        setBackground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jPanel1.setMaximumSize(new java.awt.Dimension(3367, 3367));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Módulo de administración Veterinaria");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Ingresar como...");

        Cliente.setText("Cliente");
        Cliente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClienteActionPerformed(evt);
            }
        });

        Veterinario.setText("Veterinario");
        Veterinario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VeterinarioActionPerformed(evt);
            }
        });

        Admin.setText("Administrador");
        Admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(147, 147, 147)
                        .add(jLabel2))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(137, 137, 137)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(Veterinario, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(Cliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(Admin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(30, 30, 30)
                        .add(jLabel1)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(43, 43, 43)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel2)
                .add(18, 18, 18)
                .add(Cliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(Veterinario, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(Admin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    boolean Consulta = false, Control = false, Desparasitacion = false, Vacunacion = false, Radiologia = false;
    private void guardarClientes(DefaultTableModel model){
        String nDir = "C:\\GestiónVeterinaria";
        File f = new File(nDir);
        String ruta = "C:\\GestiónVeterinaria"; //Carpeta donde se guarda el archivo
        String nombre = "Clientes.csv"; 
        File clientes = new File(ruta, nombre);

        if (!clientes.exists()) { //No existe el archivo
            f.mkdir();
            try {
                clientes.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error");
            }
        }
        try (FileWriter fw = new FileWriter(clientes.getAbsoluteFile())) {
            BufferedWriter bw = new BufferedWriter(fw);
            for (int i = 0; i < model.getRowCount(); i++) {
                int cedula = (int) model.getValueAt(i, 0);
                String nombreM = (String) model.getValueAt(i, 1);
                String razaM = (String) model.getValueAt(i, 2);
                String colorM = (String) model.getValueAt(i, 3);
                String fecha= (String) model.getValueAt(i,4);
                bw.write(cedula + "," + nombreM + "," + razaM + "," + colorM+ "," + fecha);
                bw.newLine();
            }
            bw.flush();
            bw.close();
            fw.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al crear el archivo");
        }
    }
    
    private void guardarCita(DefaultTableModel model){
        String nDir = "C:\\GestiónVeterinaria";
        File a = new File(nDir);
        String ruta = "C:\\GestiónVeterinaria"; //Carpeta donde se guarda el archivo
        String nombre = "Citas.csv"; 
        File citas = new File(ruta, nombre);

        if (!citas.exists()) { //No existe el archivo
            a.mkdir();
            try {
                citas.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error");
            }
        }
        try (FileWriter aw = new FileWriter(citas.getAbsoluteFile())) {
            BufferedWriter baw = new BufferedWriter(aw);
            for (int i = 0; i < model.getRowCount(); i++) {
                int cedula = (int) model.getValueAt(i, 0);
                String nombreM = (String) model.getValueAt(i, 1);
                String servicio = (String) model.getValueAt(i, 2);
                int precio = (int) model.getValueAt(i, 3);
                String fecha = (String) model.getValueAt(i, 4);
                Float horas = (Float) model.getValueAt (i,5);
                baw.write(cedula + "," + nombreM + "," + servicio + "," + precio + "," + fecha + "," + horas);
                baw.newLine();
            }
            baw.flush();
            baw.close();
            aw.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al crear el archivo");
        }
    }
    
    private void guardarAgenda(DefaultTableModel model){
        String nDir = "C:\\GestiónVeterinaria";
        File a = new File(nDir);
        String ruta = "C:\\GestiónVeterinaria"; //Carpeta donde se guarda el archivo
        String nombre = "Agenda.csv"; 
        File agenda = new File(ruta, nombre);

        if (!agenda.exists()) { //No existe el archivo
            a.mkdir();
            try {
                agenda.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error");
            }
        }
        try (FileWriter aw = new FileWriter(agenda.getAbsoluteFile())) {
            BufferedWriter baw = new BufferedWriter(aw);
            for (int i = 0; i < model.getRowCount(); i++) {
                int cedula = (int) model.getValueAt(i, 0);
                String nombreM = (String) model.getValueAt(i, 1);
                String servicio = (String) model.getValueAt(i, 2);
                int precio = (int) model.getValueAt(i, 3);
                String fecha = (String) model.getValueAt(i, 4);
                Float horas = (Float) model.getValueAt (i,5);
                baw.write(cedula + "," + nombreM + "," + servicio + "," + precio + "," + fecha + "," + horas);
                baw.newLine();
            }
            baw.flush();
            baw.close();
            aw.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al crear el archivo");
        }
    }
    
    private float getHoras(File citas, float tiempo, String fecha){
        float horas=0;
        boolean fechasIguales=false;
        
        try (Scanner sc = new Scanner(citas)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String servicio = data[2];
                    int precio = Integer.parseInt(data[3]);
                    String fechaC = data[4];
                    float horasc = Float.parseFloat(data[5]);
                    
                    if (fecha.equals(fechaC)){
                    fechasIguales=true;
                    }
                    
                    if (fechasIguales==true){
                        horas = horasc + tiempo;
                    }
                }
            } catch (FileNotFoundException e) {
                return -1;
            }
        if (fechasIguales==false){
            return 8;
        } else if (horas>=13 && horas<14) {
            return 14;
        } else if (horas>=18){
            return -1;
        } else {
            return horas;
        }
        
        
    }
    
    private int verificarDatos (int ced, String nombreMascota){
        boolean cedulaIgual=false, nombreMascot=false;
    
        String nDir= "C:\\GestiónVeterinaria";
        File f = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Clientes.csv"; 
        File clientes= new File (ruta, nombre); //Archivo clientes
        
        
        if (!clientes.exists()) { //No existe el archivo
            f.mkdir();
            try {
                clientes.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        
            try (Scanner sc = new Scanner(clientes)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String razaM = data[2];
                    String colorM = data[3];
                    String fecha= data[4];
                    if (ced==cedula){
                        cedulaIgual=true;
                    }
                    if (nombreMascota.equals(nombreM)){
                        nombreMascot=true;
                    }
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
            
            if (cedulaIgual==false){
                return 2;
            } else if (cedulaIgual==true && nombreMascot==false){
                return 3;
            } else if (cedulaIgual==true && nombreMascot==true) {
                return 1;
            }
       return 0;
    }
    
    
    private void actualizarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarDatosActionPerformed
        //Abre el frame para actualizar datos del cliente
        String nDir= "C:\\GestiónVeterinaria";
        File f = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Clientes.csv"; 
        File clientes= new File (ruta, nombre); //Archivo clientes
        
        
        if (!clientes.exists()) { //No existe el archivo
            f.mkdir();
            try {
                clientes.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
        
        model.setRowCount(0);
            try (Scanner sc = new Scanner(clientes)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String razaM = data[2];
                    String colorM = data[3];
                    String fecha= data[4];
                    model.addRow(new Object[]{cedula, nombreM, razaM, colorM, fecha});
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
        
        ActualizarDatos.setSize(540,350);
        ActualizarDatos.setResizable(false);
        ActualizarDatos.setLocation(720,360);
        ActualizarDatos.setVisible(true);
    }//GEN-LAST:event_actualizarDatosActionPerformed

    private void moduloCitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduloCitasActionPerformed
        //Abre el módulo de Citas
        ModuloCitas.setSize(280,380);
        ModuloCitas.setResizable(false);
        ModuloCitas.setLocation(720,360);
        ModuloCitas.setVisible(true);
    }//GEN-LAST:event_moduloCitasActionPerformed

    private void botonHisClinicasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonHisClinicasActionPerformed
        String nDir= "C:\\GestiónVeterinaria";
        File hc = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "HistoriaClinica.csv"; 
        File historiaclinica= new File (ruta, nombre); //Archivo Historia Clinica
        
        
        if (!historiaclinica.exists()) { //No existe el archivo
            hc.mkdir();
            try {
                historiaclinica.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        DefaultTableModel model = (DefaultTableModel) tablaClinica.getModel();
        
        model.setRowCount(0);
            try (Scanner sc = new Scanner(historiaclinica)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    String fecha = data[0];
                    int cedulaHC = Integer.parseInt(data[1]);
                    String nombreHC = data[2];
                    String diagnosticoHC = data[3];
                    String descripcionHC= data[4];
                    model.addRow(new Object[]{fecha, cedulaHC, nombreHC, diagnosticoHC, descripcionHC});
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
              
        DatosClinicos.setSize(600,320);
        DatosClinicos.setResizable(false);
        DatosClinicos.setLocation(720,360);
        DatosClinicos.setVisible(true);
    }//GEN-LAST:event_botonHisClinicasActionPerformed

    private void botonHisClinicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonHisClinicaActionPerformed

        HistoriaClinica.setSize(330,510);
        HistoriaClinica.setResizable(false);
        HistoriaClinica.setLocation(720,360);
        HistoriaClinica.setVisible(true);
    }//GEN-LAST:event_botonHisClinicaActionPerformed

    private void botonAgendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgendaActionPerformed
        String nDir= "C:\\GestiónVeterinaria";
        File a = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombreC= "Agenda.csv"; 
        File agenda= new File (ruta, nombreC); //Archivo Citas
        
        
        if (!agenda.exists()) { //No existe el archivo
            a.mkdir();
            try {
                agenda.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        
        DefaultTableModel model = (DefaultTableModel) tablaAgenda.getModel();
        
        //Escribe los datos del archivo Citas en la tabla
        model.setRowCount(0);
            try (Scanner sc = new Scanner(agenda)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedulaA = Integer.parseInt(data[0]);
                    String nombreMA = data[1];
                    String servicioA = data[2];
                    int precioA = Integer.parseInt(data[3]);
                    String fechaA = data[4];
                    float horasA = Float.parseFloat(data[5]);
                    model.addRow(new Object[]{cedulaA, nombreMA, servicioA, precioA, fechaA, horasA});
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
        
        //Que se carguen los datos de la agenda del veterinario
        AgendaVet.setSize(480,350);
        AgendaVet.setResizable(false);
        AgendaVet.setLocation(720,360);
        AgendaVet.setVisible(true);
    }//GEN-LAST:event_botonAgendaActionPerformed
    
    private void genFactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genFactActionPerformed
        
        //Muestra el Frame con el archivo agenda
        String nDir= "C:\\GestiónVeterinaria";
        File a = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Citas.csv"; 
        File citas= new File (ruta, nombre); //Archivo Citas
        
        
        if (!citas.exists()) { //No existe el archivo
            a.mkdir();
            try {
                citas.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        DefaultTableModel model = (DefaultTableModel) tablaFactura.getModel();
        
        //Escribe los datos del archivo Citas en la tabla
        model.setRowCount(0);
            try (Scanner sc = new Scanner(citas)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String servicio = data[2];
                    int precio = Integer.parseInt(data[3]);
                    String fecha = data[4];
                    float horas = Float.parseFloat(data[5]);
                    model.addRow(new Object[]{cedula, nombreM, servicio, precio, fecha, horas});
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
        
        GestionAdmin.setSize(540,380);
        GestionAdmin.setResizable(false);
        GestionAdmin.setLocation(720,360);
        GestionAdmin.setVisible(true);
    }//GEN-LAST:event_genFactActionPerformed

    private void añadirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirBtnActionPerformed
        //Añade datos a la tabla de datos del cliente
        boolean todoCorrecto = true;
        String dia="", mes="", año="";
        
        
        String nDir= "C:\\GestiónVeterinaria";
        File f = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Clientes.csv"; 
        File clientes= new File (ruta, nombre); //Archivo clientes
        
        
        if (!clientes.exists()) { //No existe el archivo
            f.mkdir();
            try {
                clientes.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        
        int cedula = 0;
        try {
         dia= Integer.toString(fechaNacim.getCalendar().get(Calendar.DAY_OF_MONTH));
         mes = Integer.toString(fechaNacim.getCalendar().get(Calendar.MONTH) + 1);
         año = Integer.toString(fechaNacim.getCalendar().get(Calendar.YEAR));
        } catch (java.lang.NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Ingrese una fecha correcta");
        }
        String fechaN= dia+"/"+mes+"/"+año;  
        
        
        try {
        cedula = Integer.parseInt(cedCliente.getText());
        } catch (java.lang.NumberFormatException ex) {
            try{
            cedula = Integer.parseInt(JOptionPane.showInputDialog(null, "Error al ingresar la cédula, ingrese una cédula correcta.")); 
            } catch (java.lang.NumberFormatException exx){

            }
        }
        
        if (todoCorrecto=true){
        String nombreM = nomPer.getText();
        String razaM= razaPer.getText();
        String colorM= colorPer.getText();
        
        try (FileWriter fw = new FileWriter(clientes.getAbsoluteFile(), true)) {
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(cedula + "," + nombreM + "," + razaM + "," + colorM + "," + fechaN );
            bw.newLine();
            bw.flush();
            bw.close();
            fw.close();

        } catch (IOException ex) {
            
        }
        

        nomPer.setText("");
        cedCliente.setText("");
        razaPer.setText("");
        colorPer.setText("");
        }
    }//GEN-LAST:event_añadirBtnActionPerformed

    private void cedClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cedClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cedClienteActionPerformed

    private void elimBtnClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elimBtnClienteActionPerformed

        DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
        int selectedRow = tablaClientes.getSelectedRow();
        int cedulaRow = (int) model.getValueAt(selectedRow, 0);
        String nombreMRow = (String) model.getValueAt(selectedRow, 1);
        String razaMRow = (String) model.getValueAt(selectedRow, 2);
        String colorMRow = (String) model.getValueAt(selectedRow, 3);
        String fechaRow= (String) model.getValueAt(selectedRow,4);
        
        String nDir= "C:\\GestiónVeterinaria";
        File f = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Clientes.csv"; 
        File clientes= new File (ruta, nombre); //Archivo clientes
        
        
        if (!clientes.exists()) { //No existe el archivo
            f.mkdir();
            try {
                clientes.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        
        model.setRowCount(0);
            try (Scanner sc = new Scanner(clientes)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String razaM = data[2];
                    String colorM = data[3]; 
                    String fecha= data[4];
                    if (cedula==cedulaRow && nombreM.equals(nombreMRow) && razaM.equals(razaMRow) && colorM.equals(colorMRow) && fecha.equals(fechaRow)){
                    } else {
                    model.addRow(new Object[]{cedula, nombreM, razaM, colorM, fecha});                  
                    }
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }

        guardarClientes(model);
    }//GEN-LAST:event_elimBtnClienteActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        
        String nDir= "C:\\GestiónVeterinaria";
        File f = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Clientes.csv"; 
        File clientes= new File (ruta, nombre); //Archivo clientes
        
        
        if (!clientes.exists()) { //No existe el archivo
            f.mkdir();
            try {
                clientes.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
        
        model.setRowCount(0);
            try (Scanner sc = new Scanner(clientes)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String razaM = data[2];
                    String colorM = data[3];
                    String fecha= data[4];
                    model.addRow(new Object[]{cedula, nombreM, razaM, colorM, fecha});
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
            
            int buscarCedula=0;
            try {
            buscarCedula = Integer.parseInt(cedulaBuscarCliente.getText());
            } catch (NumberFormatException exx){
            
            }
        
        int i=0;
        while (i<model.getRowCount()){
        int cedClienteBusc = (int) (model.getValueAt(i, 0));
            if (buscarCedula == cedClienteBusc){
                i++;
            } else {
                model.removeRow(i);
            }
        }
        
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void gestAgendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gestAgendaActionPerformed
        AsignarAdmin.setSize(500,330);
        AsignarAdmin.setResizable(false);
        AsignarAdmin.setLocation(720,360);
        AsignarAdmin.setVisible(true);
    }//GEN-LAST:event_gestAgendaActionPerformed

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();               
        guardarClientes(model);
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void solicitarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solicitarBtnActionPerformed
        String dia="", mes="", año="";
        int cedula = 0;
        //Recibe el número de cédula y lo verifica
        try {
        cedula = Integer.parseInt(cedulaCita.getText());
        } catch (java.lang.NumberFormatException ex) {
            try{
                cedula = Integer.parseInt(JOptionPane.showInputDialog(null, "Error al ingresar la cédula, ingrese una cédula correcta.")); 
            } catch (java.lang.NumberFormatException exx){

            }
        }
        //Recibe el nombre de la mascota
        String nombreM= nomMascota.getText();
        
        int op = verificarDatos (cedula, nombreM);
        
        if (op==1){
        //Añade datos al archivo Citas
        String nDir= "C:\\GestiónVeterinaria";
        File a = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombreC= "Citas.csv"; 
        File citas= new File (ruta, nombreC); //Archivo Citas
        
        
        if (!citas.exists()) { //No existe el archivo
            a.mkdir();
            try {
                citas.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        //Crea el archivo agenda en el mismo directorio
        String nombreA= "Agenda.csv"; 
        File agenda= new File (ruta, nombreA); //Archivo agenda
        
        
        if (!agenda.exists()) { //No existe el archivo
            a.mkdir();
            try {
                agenda.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        
        String servicio = "Sin servicio";
        int precio = 0;
        
        try {
         dia= Integer.toString(fechaCita.getCalendar().get(Calendar.DAY_OF_MONTH));
         mes = Integer.toString(fechaCita.getCalendar().get(Calendar.MONTH)+1);
         año = Integer.toString(fechaCita.getCalendar().get(Calendar.YEAR));
        } catch (java.lang.NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Ingrese una fecha correcta");
        }
        String fechaCita= dia+"/"+mes+"/"+año;
        
        
        //Con este boolean se verifica si afecta la agenda del veterinario
        boolean ambos=true;
        
        float tiempo=0f;
        float horas=0f;
        
        //Se verifica cuál Servicio ha sido solicitado junto con su precio
       if (consultaVet.isSelected()) {
           servicio = "Consulta Veterinario";
           precio = 60000;
           tiempo= 1f;
           horas=getHoras(citas, tiempo, fechaCita);
       } else if (control.isSelected()) {
           servicio = "Control";
           precio = 10000;
           tiempo= 0.5f;
           horas=getHoras(citas, tiempo, fechaCita);
       } else if(despa.isSelected()) {
           servicio = "Desparasitación";
           precio = 40000;
           tiempo=0.5f;
           horas=getHoras(citas, tiempo, fechaCita);
       } else if(vacun.isSelected()) {
           servicio = "Vacunación";
           precio = 35000;
           tiempo=0.5f;
           horas=getHoras(citas, tiempo, fechaCita);
       } else if (guard.isSelected()) {
           servicio = "Guardería";
           precio = 35000;
           ambos=false;
           horas=24f;
       } else if (radio.isSelected()) {
           servicio = "Radiología";
           precio = 100000;
           tiempo=1f;
           horas=getHoras(citas, tiempo, fechaCita);
       } else if (baño.isSelected()) {
           servicio = "Baño";
           precio = 25000;
           ambos=false;
           horas=24f;
       } else {
           JOptionPane.showMessageDialog(null, "Seleccione un servicio");
       }
       
       
       if (horas!=-1){
       //Se escriben los datos recolectados en el Archivo citas (y agenda si amerita)
       try (FileWriter aw = new FileWriter(citas.getAbsoluteFile(), true)) {
            BufferedWriter abw = new BufferedWriter(aw);
            abw.write(cedula + "," + nombreM + "," + servicio + "," + precio + "," + fechaCita + "," + horas);
            abw.newLine();
            abw.flush();
            abw.close();
            aw.close();

        } catch (IOException ex) {
            
        }
       
       if (ambos==true){
       try (FileWriter bw = new FileWriter(agenda.getAbsoluteFile(), true)) {
            BufferedWriter abcw = new BufferedWriter(bw);
            abcw.write(cedula + "," + nombreM + "," + servicio + "," + precio + "," + fechaCita + "," + horas);
            abcw.newLine();
            abcw.flush();
            abcw.close();
            bw.close();
        } catch (IOException ex) {
            
        }
       }
       } else {
       JOptionPane.showMessageDialog(null, "Error al crear cita");
       }
       
      DefaultTableModel model = (DefaultTableModel) tablaAgenda.getModel();
        
        //Escribe los datos del archivo agenda en la tabla de Agenda
        model.setRowCount(0);
            try (Scanner sc = new Scanner(agenda)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedulaA = Integer.parseInt(data[0]);
                    String nombreMA = data[1];
                    String servicioA = data[2];
                    int precioA = Integer.parseInt(data[3]);
                    String fechaA = data[4];
                    float horasA = Float.parseFloat(data[5]);
                    model.addRow(new Object[]{cedulaA, nombreMA, servicioA, precioA, fechaA, horasA});
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
       
        cedulaCita.setText("");
        nomMascota.setText("");
        } else if (op==2){
            JOptionPane.showMessageDialog(null, "Ingrese una cédula registrada");
            cedulaCita.setText("");
        } else if (op==3){
            JOptionPane.showMessageDialog(null, "Ingrese una mascota registrada a esa cédula");
            nomMascota.setText("");
        }
        
        
    }//GEN-LAST:event_solicitarBtnActionPerformed

    private void consultaVetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaVetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_consultaVetActionPerformed

    private void añadirInfoClinicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirInfoClinicaActionPerformed
        String dia="", mes="", año="";
        int cedula = 0;
        try {
        cedula = Integer.parseInt(cedulaHC.getText());
        } catch (java.lang.NumberFormatException ex) {
            try{
            cedula = Integer.parseInt(JOptionPane.showInputDialog(null, "Error al ingresar la cédula, ingrese una cédula correcta.")); 
            } catch (java.lang.NumberFormatException exx){

            }
        }
        String nomP = perroHC.getText();
        
        int op= verificarDatos (cedula, nomP);
        
        
        if (op==1){
        String nDir= "C:\\GestiónVeterinaria";
        File hc = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "HistoriaClinica.csv"; 
        File historiaclinica= new File (ruta, nombre); //Archivo clientes
        
        
        if (!historiaclinica.exists()) { //No existe el archivo
            hc.mkdir();
            try {
                historiaclinica.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        
        try {
         dia= Integer.toString(fechaHC.getCalendar().get(Calendar.DAY_OF_MONTH));
         mes = Integer.toString(fechaHC.getCalendar().get(Calendar.MONTH) + 1);
         año = Integer.toString(fechaHC.getCalendar().get(Calendar.YEAR));
         } catch (java.lang.NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Ingrese una fecha correcta");
        }
        String fechaHC= dia+"/"+mes+"/"+año;      
        
        
        

        String diagnostico= diagnosticoHC.getText();
        String descripcion= prescripcionHC.getText();
        
        try (FileWriter hcw = new FileWriter(historiaclinica.getAbsoluteFile(), true)) {
            BufferedWriter hw = new BufferedWriter(hcw);
            hw.write(fechaHC + "," + cedula + "," + nomP + "," + diagnostico + "," + descripcion );
            hw.newLine();
            hw.flush();
            hw.close();
            hcw.close();

        } catch (IOException ex) {
            
        }
        

        cedulaHC.setText("");
        perroHC.setText("");
        diagnosticoHC.setText("");
        prescripcionHC.setText("");
        } else if (op==2){
            JOptionPane.showMessageDialog(null, "Ingrese una cédula registrada");
            cedulaHC.setText("");
        } else if (op==3){
            JOptionPane.showMessageDialog(null, "Ingrese una mascota asociada a la cédula");
            perroHC.setText("");
        }
    }//GEN-LAST:event_añadirInfoClinicaActionPerformed

    private void consultaVetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consultaVetMouseClicked
        //TODO add your handling code here
    }//GEN-LAST:event_consultaVetMouseClicked

    private void controlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_controlMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_controlMouseClicked

    private void despaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_despaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_despaMouseClicked

    private void vacunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vacunMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_vacunMouseClicked

    private void guardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_guardMouseClicked

    private void radioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_radioMouseClicked

    private void bañoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bañoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_bañoMouseClicked

    private void modifBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifBtnActionPerformed
        //Hacer que aquí se cargue otro frame invisible, donde se guarda el
        //archivo Agenda, así se pueden modificar las citas en ambos
        //archivos al mismo tiempo en la tabla de modificar citas.
        
        //Muestra el Frame con el archivo agenda
        String nDir= "C:\\GestiónVeterinaria";
        File a = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Citas.csv"; 
        File citas= new File (ruta, nombre); //Archivo Citas
        
        
        if (!citas.exists()) { //No existe el archivo
            a.mkdir();
            try {
                citas.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        DefaultTableModel model = (DefaultTableModel) tablaCitas.getModel();
        
        //Escribe los datos del archivo Citas en la tabla
        model.setRowCount(0);
            try (Scanner sc = new Scanner(citas)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String servicio = data[2];
                    int precio = Integer.parseInt(data[3]);
                    String fecha = data[4];
                    float horas = Float.parseFloat(data[5]);
                    model.addRow(new Object[]{cedula, nombreM, servicio, precio, fecha, horas});
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
        
        ModificarCitasCliente.setSize(500,300);
        ModificarCitasCliente.setResizable(false);
        ModificarCitasCliente.setLocation(720,360);
        ModificarCitasCliente.setVisible(true);
    }//GEN-LAST:event_modifBtnActionPerformed

    private void buscarCitaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarCitaBtnActionPerformed
        //Verifica la existencia del archivo agenda y busca dependiendo de la cédula digitada
        String nDir= "C:\\GestiónVeterinaria";
        File a = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Citas.csv"; 
        File citas= new File (ruta, nombre); //Archivo Citas
        
        
        if (!citas.exists()) { //No existe el archivo
            a.mkdir();
            try {
                citas.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        DefaultTableModel model = (DefaultTableModel) tablaCitas.getModel();
        DefaultTableModel model2 = (DefaultTableModel) tablaAgenda.getModel();
        
        //Escribe los datos del archivo Agenda en la tabla
        model.setRowCount(0);
            try (Scanner sc = new Scanner(citas)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String servicio = data[2];
                    int precio = Integer.parseInt(data[3]);
                    String fecha = data[4];
                    Float horas = Float.parseFloat(data[5]);
                    model.addRow(new Object[]{cedula, nombreM, servicio, precio, fecha, horas});
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
            
            int buscarCedula=0;
            try {
            buscarCedula = Integer.parseInt(buscarCedulaCita.getText());
            } catch (NumberFormatException exx){
            
            }
        
        //Ciclo de búsqueda para la cedula digitada
        int i=0;
        while (i<model.getRowCount()){
        int cedClienteBusc = (int) (model.getValueAt(i, 0));
            if (buscarCedula == cedClienteBusc){
                i++;
            } else {
                model.removeRow(i);
            }
        }
        
    }//GEN-LAST:event_buscarCitaBtnActionPerformed

    private void cancelarCitaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarCitaBtnActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) tablaCitas.getModel();
        DefaultTableModel model2 = (DefaultTableModel) tablaAgenda.getModel();
        int selectedRow = tablaCitas.getSelectedRow();
        int cedulaRow = (int) model.getValueAt(selectedRow, 0);
        String nombreMRow = (String) model.getValueAt(selectedRow,1);
        String servicioRow = (String) model.getValueAt(selectedRow, 2);
        int precioRow = (int) model.getValueAt(selectedRow, 3);
        String fechaRow = (String) model.getValueAt(selectedRow, 4);
        Float horasRow = (Float) model.getValueAt (selectedRow, 5);
        
        String nDir= "C:\\GestiónVeterinaria";
        File a = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Citas.csv"; 
        File citas= new File (ruta, nombre); //Archivo Citas
        
        
        if (!citas.exists()) { //No existe el archivo
            a.mkdir();
            try {
                citas.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        
        //Crea el archivo agenda en el mismo directorio
        String nombreA= "Agenda.csv"; 
        File agenda= new File (ruta, nombreA); //Archivo agenda
        
        
        if (!agenda.exists()) { //No existe el archivo
            a.mkdir();
            try {
                agenda.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        
            model.setRowCount(0);
            model2.setRowCount(0);
            try (Scanner sc = new Scanner(citas)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String servicio = data[2];
                    int precio = Integer.parseInt(data[3]);
                    String fecha = data[4]; 
                    float horas = Float.parseFloat(data[5]);
                    if (cedula==cedulaRow && servicio.equals(servicioRow) && precio == precioRow && fecha.equals(fechaRow) && nombreM.equals(nombreMRow) && horas==horasRow){
                    } else {
                    model.addRow(new Object[]{cedula, nombreM, servicio, precio, fecha, horas});                  
                    }
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
            
            try (Scanner sc = new Scanner(agenda)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedulaA = Integer.parseInt(data[0]);
                    String nombreMA = data[1];
                    String servicioA = data[2];
                    int precioA = Integer.parseInt(data[3]);
                    String fechaA = data[4]; 
                    float horasA = Float.parseFloat(data[5]);
                    if (cedulaA==cedulaRow && servicioA.equals(servicioRow) && precioA == precioRow && fechaA.equals(fechaRow) && nombreMA.equals(nombreMRow) && horasA==horasRow){
                    } else {
                    model2.addRow(new Object[]{cedulaA, nombreMA, servicioA, precioA, fechaA, horasA});                  
                    }
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }

        guardarCita(model);
        guardarAgenda(model2);
    }//GEN-LAST:event_cancelarCitaBtnActionPerformed

    private void guardarAgendaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarAgendaBtnActionPerformed
        
        //Podríamos hacer que se compare con agenda y, dependiendo del servicio
        //siga comparando y si hay algún cambio que se guarde la nueva row
        //también que directamente el método guarde solo la row, no el modelo
        //completo, así no interfiere con buscar
        DefaultTableModel model = (DefaultTableModel) tablaCitas.getModel();
        guardarCita(model);
    }//GEN-LAST:event_guardarAgendaBtnActionPerformed

    private void buscarAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarAdminActionPerformed
        //Verifica la existencia del archivo agenda y busca dependiendo de la cédula digitada
        String nDir= "C:\\GestiónVeterinaria";
        File a = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Citas.csv"; 
        File citas= new File (ruta, nombre); //Archivo Citas
        
        
        if (!citas.exists()) { //No existe el archivo
            a.mkdir();
            try {
                citas.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        DefaultTableModel model = (DefaultTableModel) tablaFactura.getModel();
        
        //Escribe los datos del archivo Agenda en la tabla
        model.setRowCount(0);
            try (Scanner sc = new Scanner(citas)) {
                while (sc.hasNextLine()) {
                    String linea = sc.nextLine();
                    String data[] = linea.split(",");
                    int cedula = Integer.parseInt(data[0]);
                    String nombreM = data[1];
                    String servicio = data[2];
                    int precio = Integer.parseInt(data[3]);
                    String fecha = data[4];
                    model.addRow(new Object[]{cedula, nombreM, servicio, precio, fecha});
                }
            } catch (FileNotFoundException e) {
                System.out.println("El archivo no se encontró");
            }
            
            int buscarCedula=0;
            try {
            buscarCedula = Integer.parseInt(cedFacturar.getText());
            } catch (NumberFormatException exx){
            
            }
        
        //Ciclo de búsqueda para la cedula digitada
        int i=0;
        while (i<model.getRowCount()){
        int cedClienteBusc = (int) (model.getValueAt(i, 0));
            if (buscarCedula == cedClienteBusc){
                i++;
            } else {
                model.removeRow(i);
            }
        }
    }//GEN-LAST:event_buscarAdminActionPerformed

    private void totalPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalPagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalPagarActionPerformed

    private void facturarAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facturarAdminActionPerformed
        DefaultTableModel model = (DefaultTableModel) tablaFactura.getModel();
        
        int totalpagar = 0;
        
        for (int i = 0; i < model.getRowCount(); i++) {
            totalpagar += (int) (model.getValueAt(i, 3));
        }
        
        totalPagar.setText(String.valueOf(totalpagar));
    }//GEN-LAST:event_facturarAdminActionPerformed

    private void ClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClienteActionPerformed
        //Abre el módulo Cliente
        ModuloCliente.setSize(430,370);
        ModuloCliente.setResizable(false);
        ModuloCliente.setLocation(720, 360);
        ModuloCliente.setVisible(true);
    }//GEN-LAST:event_ClienteActionPerformed

    private void VeterinarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VeterinarioActionPerformed
        //Abre el módulo Veterinario
        ModuloVeterinario.setSize(420,270);
        ModuloVeterinario.setResizable(false);
        ModuloVeterinario.setLocation(720,360);
        ModuloVeterinario.setVisible(true);
    }//GEN-LAST:event_VeterinarioActionPerformed

    private void AdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminActionPerformed
        //Abre el módulo Admin
        ModuloAdmin.setSize(402,306);
        ModuloAdmin.setResizable(false);
        ModuloAdmin.setLocation(720,360);
        ModuloAdmin.setVisible(true);
    }//GEN-LAST:event_AdminActionPerformed

    private void despaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_despaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_despaActionPerformed

    private void verAgendaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verAgendaBtnActionPerformed
        String nDir= "C:\\GestiónVeterinaria";
        File a = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombre= "Citas.csv";
        File citas= new File (ruta, nombre); //Archivo Citas

        if (!citas.exists()) { //No existe el archivo
            a.mkdir();
            try {
                citas.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }
        DefaultTableModel model = (DefaultTableModel) tablaCitas.getModel();

        //Escribe los datos del archivo Citas en la tabla
        model.setRowCount(0);
        try (Scanner sc = new Scanner(citas)) {
            while (sc.hasNextLine()) {
                String linea = sc.nextLine();
                String data[] = linea.split(",");
                int cedula = Integer.parseInt(data[0]);
                String nombreM = data[1];
                String servicio = data[2];
                int precio = Integer.parseInt(data[3]);
                String fecha = data[4];
                float horas = Float.parseFloat(data[5]);
                model.addRow(new Object[]{cedula, nombreM, servicio, precio, fecha, horas});
            }
        } catch (FileNotFoundException e) {
            System.out.println("El archivo no se encontró");
        }

        ModificarCitasCliente.setSize(500,300);
        ModificarCitasCliente.setResizable(false);
        ModificarCitasCliente.setLocation(720,360);
        ModificarCitasCliente.setVisible(true);
    }//GEN-LAST:event_verAgendaBtnActionPerformed

    private void asignarDatosAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asignarDatosAdminActionPerformed
        String dia="", mes="", año="", diaCl="", mesCl="", añoCl="";
        String nDir= "C:\\GestiónVeterinaria";
        File a = new File(nDir); //Carpeta en el disco C
        String ruta = "C:\\GestiónVeterinaria";
        String nombreC= "Citas.csv";
        File citas= new File (ruta, nombreC); //Archivo Citas
        String nombreCl= "Clientes.csv";
        File clientes= new File (ruta, nombreCl); //Archivo clientes
        String nombreA= "Agenda.csv";
        File agenda= new File (ruta, nombreA); //Archivo agenda

        if (!citas.exists()) { //No existe el archivo
            a.mkdir();
            try {
                citas.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }

        if (!agenda.exists()) { //No existe el archivo
            a.mkdir();
            try {
                agenda.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }

        if (!clientes.exists()) { //No existe el archivo
            a.mkdir();
            try {
                clientes.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error en la creación del archivo");
            }
        }

        String servicio = "Sin servicio";
        int precio = 0;
        int cedula = 0;

        //Fecha de la cita
        try {
         dia= Integer.toString(fechaConsulAdmin.getCalendar().get(Calendar.DAY_OF_MONTH));
         mes = Integer.toString(fechaConsulAdmin.getCalendar().get(Calendar.MONTH)+1);
         año = Integer.toString(fechaConsulAdmin.getCalendar().get(Calendar.YEAR));
        } catch (java.lang.NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Ingrese una fecha correcta");
        }
        String fechaCita= dia+"/"+mes+"/"+año;

        try {
        //Fecha de nacimiento de la mascota del cliente
         diaCl= Integer.toString(fechaNacimientoAdmin.getCalendar().get(Calendar.DAY_OF_MONTH));
         mesCl = Integer.toString(fechaNacimientoAdmin.getCalendar().get(Calendar.MONTH) + 1);
         añoCl = Integer.toString(fechaNacimientoAdmin.getCalendar().get(Calendar.YEAR));
        } catch (java.lang.NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Ingrese una fecha correcta");
        }
        String fechaN= dia+"/"+mes+"/"+año;

        //Recibe el número de cédula y lo verifica
        try {
            cedula = Integer.parseInt(cedulaAdmin.getText());
        } catch (java.lang.NumberFormatException ex) {
            try{
                cedula = Integer.parseInt(JOptionPane.showInputDialog(null, "Error al ingresar la cédula, ingrese una cédula correcta."));
            } catch (java.lang.NumberFormatException exx){

            }
        }

        //Recibe los datos de la mascota
        String nombreM= nomMascotaAdmin.getText();
        String razaP= razaMascotaAdmin.getText();
        String colorM= colorMascotaAdmin.getText();

        //Con este boolean se verifica si afecta la agenda del veterinario
        boolean ambos=true;

        float tiempo=0f;
        float horas=0f;

        //Se verifica cuál Servicio ha sido solicitado junto con su precio
        if (consultaAdm.isSelected()) {
            servicio = "Consulta Veterinario";
            precio = 60000;
            tiempo= 1f;
            horas=getHoras(citas, tiempo, fechaCita);
        } else if (controlAdm.isSelected()) {
            servicio = "Control";
            precio = 10000;
            tiempo= 0.5f;
            horas=getHoras(citas, tiempo, fechaCita);
        } else if(desparasitacionAdm.isSelected()) {
            servicio = "Desparasitación";
            precio = 40000;
            tiempo=0.5f;
            horas=getHoras(citas, tiempo, fechaCita);
        } else if(vacunacionAdm.isSelected()) {
            servicio = "Vacunación";
            precio = 35000;
            tiempo=0.5f;
            horas=getHoras(citas, tiempo, fechaCita);
        } else if (guarderiaAdm.isSelected()) {
            servicio = "Guardería";
            precio = 35000;
            ambos=false;
            horas=24f;
        } else if (radiologiaAdm.isSelected()) {
            servicio = "Radiología";
            precio = 100000;
            tiempo=1f;
            horas=getHoras(citas, tiempo, fechaCita);
        } else if (bañoAdm.isSelected()) {
            servicio = "Baño";
            precio = 25000;
            ambos=false;
            horas=24f;
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un servicio");
        }

        //Se escriben los datos en el achivo clientes
        try (FileWriter fw = new FileWriter(clientes.getAbsoluteFile(), true)) {
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(cedula + "," + nombreM + "," + razaP + "," + colorM + "," + fechaN );
            bw.newLine();
            bw.flush();
            bw.close();
            fw.close();

        } catch (IOException ex) {

        }

        if (horas!=-1){
            //Se escriben los datos recolectados en el Archivo citas (y agenda si amerita)
            try (FileWriter aw = new FileWriter(citas.getAbsoluteFile(), true)) {
                BufferedWriter abw = new BufferedWriter(aw);
                abw.write(cedula + "," + nombreM + "," + servicio + "," + precio + "," + fechaCita + "," + horas);
                abw.newLine();
                abw.flush();
                abw.close();
                aw.close();

            } catch (IOException ex) {

            }

            if (ambos==true){
                try (FileWriter bw = new FileWriter(agenda.getAbsoluteFile(), true)) {
                    BufferedWriter abcw = new BufferedWriter(bw);
                    abcw.write(cedula + "," + nombreM + "," + servicio + "," + precio + "," + fechaCita + "," + horas);
                    abcw.newLine();
                    abcw.flush();
                    abcw.close();
                    bw.close();
                } catch (IOException ex) {

                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error al crear cita");
        }

        DefaultTableModel model = (DefaultTableModel) tablaAgenda.getModel();

        //Escribe los datos del archivo agenda en la tabla de Agenda
        model.setRowCount(0);
        try (Scanner sc = new Scanner(agenda)) {
            while (sc.hasNextLine()) {
                String linea = sc.nextLine();
                String data[] = linea.split(",");
                int cedulaA = Integer.parseInt(data[0]);
                String nombreMA = data[1];
                String servicioA = data[2];
                int precioA = Integer.parseInt(data[3]);
                String fechaA = data[4];
                float horasA = Float.parseFloat(data[5]);
                model.addRow(new Object[]{cedulaA, nombreMA, servicioA, precioA, fechaA, horasA});
            }
        } catch (FileNotFoundException e) {
            System.out.println("El archivo no se encontró");
        }

        cedulaAdmin.setText("");
        nomMascotaAdmin.setText("");
        razaMascotaAdmin.setText("");
        colorMascotaAdmin.setText("");

    }//GEN-LAST:event_asignarDatosAdminActionPerformed

    private void vacunacionAdmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vacunacionAdmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vacunacionAdmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Modulo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Modulo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Modulo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Modulo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Modulo().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame ActualizarDatos;
    private javax.swing.JButton Admin;
    private javax.swing.JFrame AgendaVet;
    private javax.swing.JFrame AsignarAdmin;
    public static javax.swing.ButtonGroup BotonesAdmin;
    private javax.swing.JButton Cliente;
    private javax.swing.JFrame DatosClinicos;
    private javax.swing.JFrame GestionAdmin;
    private javax.swing.JFrame HistoriaClinica;
    private javax.swing.JFrame ModificarCitasCliente;
    private javax.swing.JFrame ModuloAdmin;
    private javax.swing.JFrame ModuloCitas;
    private javax.swing.JFrame ModuloCliente;
    private javax.swing.JFrame ModuloVeterinario;
    private javax.swing.JButton Veterinario;
    private javax.swing.JButton actualizarDatos;
    private javax.swing.JButton asignarDatosAdmin;
    private javax.swing.JButton añadirBtn;
    private javax.swing.JButton añadirInfoClinica;
    private javax.swing.JRadioButton baño;
    private javax.swing.JRadioButton bañoAdm;
    private javax.swing.JButton botonAgenda;
    private javax.swing.JButton botonHisClinica;
    private javax.swing.JButton botonHisClinicas;
    private javax.swing.JButton buscarAdmin;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField buscarCedulaCita;
    private javax.swing.JButton buscarCitaBtn;
    private javax.swing.JButton cancelarCitaBtn;
    private javax.swing.JTextField cedCliente;
    private javax.swing.JTextField cedFacturar;
    private javax.swing.JTextField cedulaAdmin;
    private javax.swing.JTextField cedulaBuscarCliente;
    private javax.swing.JTextPane cedulaCita;
    private javax.swing.JTextField cedulaHC;
    private javax.swing.ButtonGroup citasOp;
    private javax.swing.JTextField colorMascotaAdmin;
    private javax.swing.JTextField colorPer;
    private javax.swing.JRadioButton consultaAdm;
    private javax.swing.JRadioButton consultaVet;
    private javax.swing.JRadioButton control;
    private javax.swing.JRadioButton controlAdm;
    private javax.swing.JRadioButton despa;
    private javax.swing.JRadioButton desparasitacionAdm;
    private javax.swing.JTextField diagnosticoHC;
    private javax.swing.JButton elimBtnCliente;
    private javax.swing.JButton facturarAdmin;
    private com.toedter.calendar.JDateChooser fechaCita;
    private com.toedter.calendar.JDateChooser fechaConsulAdmin;
    private com.toedter.calendar.JDateChooser fechaHC;
    private com.toedter.calendar.JDateChooser fechaNacim;
    private com.toedter.calendar.JDateChooser fechaNacimientoAdmin;
    private javax.swing.JButton genFact;
    private javax.swing.JButton gestAgenda;
    private javax.swing.JRadioButton guard;
    private javax.swing.JButton guardarAgendaBtn;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JRadioButton guarderiaAdm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton modifBtn;
    private javax.swing.JButton moduloCitas;
    private javax.swing.JTextPane nomMascota;
    private javax.swing.JTextField nomMascotaAdmin;
    private javax.swing.JTextField nomPer;
    private javax.swing.JTextField perroHC;
    private javax.swing.JTextField prescripcionHC;
    private javax.swing.JRadioButton radio;
    private javax.swing.JRadioButton radiologiaAdm;
    private javax.swing.JTextField razaMascotaAdmin;
    private javax.swing.JTextField razaPer;
    private javax.swing.JButton solicitarBtn;
    private javax.swing.JTable tablaAgenda;
    private javax.swing.JTable tablaCitas;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTable tablaClinica;
    private javax.swing.JTable tablaFactura;
    private javax.swing.JTextField totalPagar;
    private javax.swing.JRadioButton vacun;
    private javax.swing.JRadioButton vacunacionAdm;
    private javax.swing.JButton verAgendaBtn;
    // End of variables declaration//GEN-END:variables

}
